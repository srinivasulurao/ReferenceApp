package com.aotd.activities;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.json.JSONObject;

import android.app.ProgressDialog;
import android.content.Context;
import android.graphics.Color;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.widget.Toast;

import com.aotd.helpers.DirectionsJSONParser;
import com.aotd.model.RouteOptamizationModel;
import com.aotd.utils.Utils;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.MapsInitializer;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;

public class NewOrdersRouteOptimizationMapActivity extends FragmentActivity	implements OnMapClickListener, LocationListener {
	String err_Msg = null;

	private static final int MAP_TYPE_NORMAL = 1;
	private GoogleMap mMap;
	LatLng pinPosition, toPosition, current;

	protected LocationManager locationManager;
	String provider;
	protected double latitude, longitude;
	protected Context context;
	private ArrayList<RouteOptamizationModel> mRouteOptamizationModelFeeds;
	private ArrayList<double[]> latlong_arr;
	
	private final int SUCCESS = 1;
	private final int ERROR = 0;

	ArrayList<String> selectedlatitudeArray, selectedlongitudeArray;
	private ProgressDialog progressdialog;
	
	private int point_cnt = 0;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.new_aotd_driver_gps_screen);

		mRouteOptamizationModelFeeds = (ArrayList<RouteOptamizationModel>) getIntent().getExtras().getSerializable("data");
		latlong_arr = (ArrayList<double[]>) getIntent().getExtras().getSerializable("points");
		
		Log.i("map values", "kkk "+mRouteOptamizationModelFeeds);
		/* Working code*/
	    getCurrentLocation();
		setUpMapIfNeeded();
		try {
		     MapsInitializer.initialize(this);
		 } catch (GooglePlayServicesNotAvailableException e) {
		     e.printStackTrace();
		 }
		mMap.setOnMapClickListener(this);
		mMap.setMyLocationEnabled(true);
		mMap.getUiSettings().setMyLocationButtonEnabled(true);
		
		if (mRouteOptamizationModelFeeds!= null) {
			
			for (int i = 0; i < mRouteOptamizationModelFeeds.size(); i++) {
				
				pinPosition = new LatLng(mRouteOptamizationModelFeeds.get(i).getLatitude(), mRouteOptamizationModelFeeds.get(i).getLongitude());
				setUpMap(pinPosition,mRouteOptamizationModelFeeds.get(i).getAddress(),mRouteOptamizationModelFeeds.get(i).getType());
			}
			if(point_cnt < mRouteOptamizationModelFeeds.size()) {
			addRouteOnMap(Utils.LATITUDE, Utils.LONGITUDE, latlong_arr.get(point_cnt+1)[0], latlong_arr.get(point_cnt+1)[1]);
				
			}
		}else{
			Log.i("map values", "kkk mRouteOptamizationModelFeeds null......");

		}

	}
	@Override
	protected void onResume() {
		/* Working code*/
	    super.onResume();
	    getCurrentLocation();	    
	    setUpMapIfNeeded();
	    mMap.setMyLocationEnabled(true);
	    
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		try{
			if(progressdialog != null && progressdialog.isShowing()){
				progressdialog.dismiss();
			}
		}catch(Exception e){
				e.printStackTrace();
		}
		
	}

	private void setUpMapIfNeeded() {
		/* Working code*/
		if (mMap == null) {
			mMap = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map)).getMap();

			Log.i("map value", "kkk " + mMap + "");

			if (mMap != null) {
				
				setUpCurrentPositionPin(current);

			}
		}
	}
	
	private void setUpCurrentPositionPin(LatLng current) {
		mMap.setMapType(MAP_TYPE_NORMAL);
		mMap.animateCamera(CameraUpdateFactory.zoomTo(10), 2000, null);
		if(current != null){
			mMap.addMarker(new MarkerOptions().position(current).title(current.toString()));		
			mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(current, 20));
		}
		
		
	}

	private void setUpMap(LatLng pinPosition,String address,String type) {

		/* Working code*/
		Log.i("map value", "kkk setUpMap is called");
		
		if (type.equalsIgnoreCase("PU")) {
			
			mMap.addMarker(new MarkerOptions().position(pinPosition).title(address).icon(BitmapDescriptorFactory.fromResource(R.drawable.pin_green)));
		}else if(type.equalsIgnoreCase("DL")){
			
			mMap.addMarker(new MarkerOptions().position(pinPosition).title(address).icon(BitmapDescriptorFactory.fromResource(R.drawable.pin_red)));
		}

	}

	public void onMapClick(LatLng point) {

	}
	/** Get current latitude and longtude values by using location */
	private void getCurrentLocation() {

		locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);


		Criteria criteria = new Criteria();
		provider = locationManager.getBestProvider(criteria, false);

		if (provider != null && !provider.equals("")) {

			
			
		Location location = locationManager.getLastKnownLocation(provider);

		locationManager.requestLocationUpdates(provider, 20000, 1, this);

			if (location == null) {

				Toast.makeText(NewOrdersRouteOptimizationMapActivity.this, "Unable find Current Location..", Toast.LENGTH_LONG).show();
				/*latitude = location.getLatitude();
				longitude = location.getLongitude();*/
			} else {

				latitude = location.getLatitude();
				longitude = location.getLongitude();
				
				current = new LatLng(latitude,longitude);
				
				Utils.LATITUDE = location.getLatitude();
				Utils.LONGITUDE = location.getLongitude();
				
//				Utils.LATITUDE = 29.464475;
//				Utils.LONGITUDE = -98.446733;
				
				Log.e("lag & long ",location.getLatitude() + "" + location.getLongitude());
				
			}

		} else {
			
			Toast.makeText(getBaseContext(), "No Provider Found",Toast.LENGTH_SHORT).show();
		}
	}
	
	protected void addRouteOnMap(double fromLat,double fromLon,double toLat,double toLon) {	 
		
		progressdialog = new ProgressDialog(NewOrdersRouteOptimizationMapActivity.this);
		progressdialog.setMessage("Please wait.....");
		progressdialog.setCancelable(true);
		progressdialog.show();
		
		Log.i("", "kkk addRoute from"+fromLat+","+fromLon);
		Log.i("", "kkk addRoute to"+toLat+","+toLon);
		
		String directionUrl = String.format("http://maps.googleapis.com/maps/api/directions/json?origin=%s,%s&destination=%s,%s&sensor=false&mode=driving",String.valueOf(fromLat),String.valueOf(fromLon),String.valueOf(toLat),String.valueOf(toLon));
		
		Log.i("", "kkk addRoute direction url"+directionUrl);

		DownloadTask downloadTask = new DownloadTask(mRouteHandler);

		// Start downloading json data from Google Directions API
		downloadTask.execute(directionUrl);
		
		
		//new GetNoOfRoutesAPIResponseHandler(String.format("http://maps.googleapis.com/maps/api/directions/json?origin=%s,%s&destination=%s,%s&sensor=false&mode=driving",String.valueOf(fromLat),String.valueOf(fromLon),String.valueOf(toLat),String.valueOf(toLon)), mRouteHandler).start();
	
	
	}
	
	@Override
	public void onLocationChanged(Location location) {
		/* Working code*/
		Log.e("lag & long ",location.getLatitude() + "" + location.getLongitude());
		
		current = new LatLng(location.getLatitude(),location.getLongitude());

		Utils.LATITUDE = location.getLatitude();
		Utils.LONGITUDE = location.getLongitude();
	}
	@Override
	public void onProviderDisabled(String provider) {
		
	}
	@Override
	public void onProviderEnabled(String provider) {
		
	}
	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		
	}
	

	/** Response Handler it's called when Search Ride response is come back */
	private Handler mRouteHandler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
            if(progressdialog != null && progressdialog.isShowing()){
    			progressdialog.dismiss();
            }
			
			switch (msg.what) {
			case SUCCESS:

				String err_Msg = msg.getData().getString("err_Msg");
				Log.e("response_reg", "kkk "+err_Msg);

				if (err_Msg.equalsIgnoreCase("OK")) {

//					selectedlatitudeArray = msg.getData().getStringArrayList("latArray");
//					selectedlongitudeArray = msg.getData().getStringArrayList("lonArray");
//					
//					com.google.android.gms.maps.model.PolylineOptions polylineOptions = new com.google.android.gms.maps.model.PolylineOptions();
//
//					for (int i = 0; i < selectedlatitudeArray.size(); i++) {
//
//						polylineOptions.width(3);
//						polylineOptions.color(Color.BLUE);
//
//						polylineOptions.add(new LatLng(Double.parseDouble(selectedlatitudeArray.get(i)), Double.parseDouble(selectedlongitudeArray.get(i))));
//						mMap.addPolyline(polylineOptions);
//					}
					
					point_cnt = point_cnt+1;
					
					if(point_cnt<mRouteOptamizationModelFeeds.size()-1){
						
						addRouteOnMap(latlong_arr.get(point_cnt)[0], latlong_arr.get(point_cnt)[1], latlong_arr.get(point_cnt+1)[0], latlong_arr.get(point_cnt+1)[1]);
					}

				}else{
					
					Toast.makeText(NewOrdersRouteOptimizationMapActivity.this, "Route not found....", Toast.LENGTH_SHORT).show();
				}

				break;

			case ERROR:
				
				String error = msg.getData().getString("err_Msg");
				Toast.makeText(NewOrdersRouteOptimizationMapActivity.this, error, Toast.LENGTH_SHORT).show();
				break;
			}
		}
	};

	
	
	//newly added code
	// Fetches data from url passed
		private class DownloadTask extends AsyncTask <String, Void, String> {

			private Handler mRouteHandler;
		
			
			public DownloadTask(Handler parentHandler) {
				this.mRouteHandler = parentHandler;
				
			}
			@Override
			protected void onPreExecute () {

				super.onPreExecute();
			}

			// Downloading data in non-ui thread
			@Override
			protected String doInBackground (String... url) {
	      Log.i("", "kkk csk direction url..."+url);
				// For storing data from web service
				String data = "";

				try {
					// Fetching the data from web service
					data = downloadUrl(url[0]);
				}
				catch (Exception e) {
					Log.d("Background Task", e.toString());
				}
				return data;
			}

			// Executes in UI thread, after the execution of
			// doInBackground()
			@Override
			protected void onPostExecute (String result) {
				super.onPostExecute(result);

				ParserTask parserTask = new ParserTask(mRouteHandler);

				// Invokes the thread for parsing the JSON data
				parserTask.execute(result);

			}
		}
		
		public String downloadUrl (String strUrl) throws IOException {
			String data = "";
			InputStream iStream = null;
			HttpURLConnection urlConnection = null;
			try {
				URL url = new URL(strUrl);

				// Creating an http connection to communicate with url
				urlConnection = (HttpURLConnection) url.openConnection();

				// Connecting to url
				urlConnection.connect();

				// Reading data from url
				iStream = urlConnection.getInputStream();

				BufferedReader br = new BufferedReader(new InputStreamReader(iStream));

				StringBuffer sb = new StringBuffer();

				String line = "";
				while ((line = br.readLine()) != null) {
					sb.append(line);
				}

				data = sb.toString();

				br.close();

			}
			catch (Exception e) {
				Log.d("Exception while downloading url", e.toString());
			}
			finally {
				iStream.close();
				urlConnection.disconnect();
			}
			return data;
		}
		
		/** A class to parse the Google Places in JSON format */
		private class ParserTask extends AsyncTask <String, Integer, List <List <HashMap <String, String>>>> {

			private Handler mRouteHandler;
			private Message msg;
			private Bundle msgData;
			private int type;
			private ArrayList<String> latitudeArray;
			private ArrayList<String> longitudeArray;
			
			public ParserTask(Handler mRouteHandler) {
				
				this.mRouteHandler = mRouteHandler;
				msg = new Message();
				msgData = new Bundle();
				this.type = 0;
			
			}

			// Parsing the data in non-ui thread
			@Override
			protected List <List <HashMap <String, String>>> doInBackground (String... jsonData) {

				JSONObject jObject;
				List <List <HashMap <String, String>>> routes = null;

				try {
					jObject = new JSONObject(jsonData[0]);
					DirectionsJSONParser parser = new DirectionsJSONParser();

					// Starts parsing data
					routes = parser.parse(jObject);
				}
				catch (Exception e) {
					e.printStackTrace();
				}
				return routes;
			}

			// Executes in UI thread, after the parsing process
			@Override
			protected void onPostExecute (List <List <HashMap <String, String>>> result) {

				latitudeArray = new ArrayList<String>();
				longitudeArray = new ArrayList<String>();
				
				ArrayList <LatLng> points = null;
				PolylineOptions lineOptions = null;
				MarkerOptions markerOptions = new MarkerOptions();

				if (result != null && result.size() > 0) {
				// Traversing through all the routes
				for (int i = 0; i < result.size(); i++) {
					points = new ArrayList <LatLng>();
					lineOptions = new PolylineOptions();

					// Fetching i-th route
					List <HashMap <String, String>> path = result.get(i);

					// Fetching all the points in i-th route
					for (int j = 0; j < path.size(); j++) {
						HashMap <String, String> point = path.get(j);

						
						//latitudeArray.add(point.get("lat"));
						//longitudeArray.add(point.get("lng"));
						double lat = Double.parseDouble(point.get("lat"));
						double lng = Double.parseDouble(point.get("lng"));
						LatLng position = new LatLng(lat, lng);

						points.add(position);
					}

					// Adding all the points in the route to LineOptions
					lineOptions.addAll(points);
					lineOptions.width(4);

					// Changing the color polyline according to the mode
					lineOptions.color(Color.BLUE);
					

					// Drawing polyline in the Google Map for the i-th route
					mMap.addPolyline(lineOptions);

				}
				err_Msg = "OK";
				}else {

					err_Msg = "No data found";
				}
				msg.what = SUCCESS;
				msgData.putString("err_Msg", err_Msg);

				//msgData.putStringArrayList("latArray", latitudeArray);
				//msgData.putStringArrayList("lonArray", longitudeArray);

				Log.i("", "kkk type "+type);
				msgData.putInt("type", type);
				msg.setData(msgData);
				this.mRouteHandler.sendMessage(msg);
			}

		}

}
